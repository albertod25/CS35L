The version of sort on the server is:
$ sort --version

I am on version 8.30, which was release in 2018. This version is good.

To build my text file of floating point numbers, I run the following command:
$ od -An -t fF -N $((2**26)) < /dev/urandom | tr -s [:blank:] '\n' | sed '/^$/d
  ' > random.txt

I then use the following command to make sure everthing worked out.
$ wc -l random.txt 

After this, I run the following commands to time sort when using different
options:
$ time -p sort -g random.txt > /dev/null
$ time -p sort -g --parallel=1 random.txt > /dev/null
$ time -p sort -g --parallel=2 random.txt > /dev/null
$ time -p sort -g --parallel=4 random.txt > /dev/null
$ time -p sort -g --parallel=8 random.txt > /dev/null

The results are as follows:
sort -g
    > real 34.96
    > user 191.57
    > sys 0.75
sort -g --parallel=1
    > real 177.84
    > user 177.49
    > sys 0.31
sort -g --parallel=2
    > real 94.52
    > user 179.86
    > sys 0.47
sort -g --parallel=4
    > real 54.61
    > user 184.66
    > sys 0.66
sort -g --parallel=8
    > real 34.62
    > user 191.57
    > sys 0.76

As expected, the real time for each command to run gets better as we introduce
more threads. At the same time, the sys time increased as we introduced more
threads. We expected this as more threads means that there needs to be more
overhead to allocate enough memory for each thread and allow each thread to
communicate with eachother. I did not expect however, for the user time to get
worse with each new thread we introduced. This will take some further research.
For the regular sort -g command, I noticed that this was equivalent to calling
sort with 8 threads. This makes sense from a usability standpoint as we'd want
to give the user the fastest version of sort without having them worry about
parallelization.
